services:
  # MongoDB Database
  mongodb:
    image: mongo:latest
    container_name: microservices-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: backend-template
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - microservices-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    container_name: microservices-auth
    restart: unless-stopped
    # Remove external port binding - only accessible through gateway
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_PORT=3001
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/backend-template?authSource=admin
      - JWT_SECRET=your_super_secret_jwt_key_change_in_production
      - JWT_ACCESS_TOKEN_EXPIRY=15m
      - JWT_REFRESH_TOKEN_EXPIRY=7d
      - CORS_WHITELIST=http://localhost:3000,http://localhost:80,http://localhost:443
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service  
  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    container_name: microservices-user
    restart: unless-stopped
    # Remove external port binding - only accessible through gateway
    expose:
      - "3002"
    environment:
      - NODE_ENV=production
      - USER_SERVICE_PORT=3002
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/backend-template?authSource=admin
      - JWT_SECRET=your_super_secret_jwt_key_change_in_production
      - JWT_ACCESS_TOKEN_EXPIRY=15m
      - JWT_REFRESH_TOKEN_EXPIRY=7d
      - CORS_WHITELIST=http://localhost:3000,http://localhost:80,http://localhost:443
    depends_on:
      mongodb:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AWS Service
  aws-service:
    build:
      context: .
      dockerfile: ./services/aws-service/Dockerfile
    container_name: microservices-aws
    restart: unless-stopped
    # Remove external port binding - only accessible through gateway
    expose:
      - "3003"
    environment:
      - NODE_ENV=production
      - AWS_SERVICE_PORT=3003
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/backend-template?authSource=admin
      - JWT_SECRET=your_super_secret_jwt_key_change_in_production
      - CORS_WHITELIST=http://localhost:3000,http://localhost:80,http://localhost:443
      # AWS Configuration (replace with your actual values or use LocalStack)
      - AWS_ACCESS_KEY_ID=your_aws_access_key
      - AWS_SECRET_ACCESS_KEY=your_aws_secret_key
      - AWS_REGION=us-east-1
      - AWS_S3_BUCKET=your-s3-bucket
      - AWS_EC2_IMAGE_ID=ami-0abcdef1234567890
      - AWS_EC2_INSTANCE_TYPE=t2.micro
      - AWS_EC2_MIN_COUNT=1
      - AWS_EC2_MAX_COUNT=1
      - AWS_EC2_KEY_NAME=your-key-name
      - AWS_EC2_SECURITY_GROUP_IDS=sg-12345678
      - GITHUB_REPO_URL=https://github.com/your-username/backend-template
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: microservices-gateway
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      # Temporarily commented out due to Docker Desktop/WSL mount issue
      # - ./nginx/logs:/var/log/nginx
      # For SSL certificates (if needed)
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      aws-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "com.microservices.description=API Gateway"
      - "com.microservices.service=gateway"

  # Optional: Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: redis-server --appendonly yes --requirepass your_redis_password

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: microservices-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - microservices-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: microservices-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - microservices-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 