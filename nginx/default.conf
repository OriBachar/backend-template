# Basic upstream configuration
upstream auth-service {
    server auth-service:3001;
}

upstream user-service {
    server user-service:3002;
}

upstream aws-service {
    server aws-service:3003;
}

# Main server configuration
server {
    listen 80;
    server_name localhost;

    # Basic security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";

    # Gateway health check
    location /health {
        access_log off;
        return 200 '{"status":"healthy","gateway":"nginx","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Gateway status
    location /api/gateway/status {
        access_log off;
        return 200 '{"status":"online","version":"1.0","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Auth Service Routes
    location /api/v1/auth/ {
        proxy_pass http://auth-service/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # User Service Routes
    location /api/v1/users/ {
        proxy_pass http://user-service/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # AWS Service Routes
    location /api/v1/aws/ {
        proxy_pass http://aws-service/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API Documentation
    location /api/v1/docs {
        return 200 '{"message":"API Gateway Documentation","endpoints":["/api/v1/auth","/api/v1/users","/api/v1/aws"]}';
        add_header Content-Type application/json;
    }

    # Root endpoint
    location / {
        return 200 '{"message":"Microservices API Gateway","status":"online","health":"/health"}';
        add_header Content-Type application/json;
    }

    # Default API handler
    location /api/ {
        return 404 '{"error":"API endpoint not found"}';
        add_header Content-Type application/json;
    }
} 